var mapApp=angular.module("mapApp",["ngMaterial"]).controller("map",function($scope,$http,$rootScope,MapService,socket,TwitterService,config){var data,randomColor,version=0;mapboxgl.accessToken=config["gl-accessToken"];var map=new mapboxgl.Map({container:"map",style:"mapbox://styles/mapbox/streets-v8",center:[-122.3331,47.6097],zoom:10});$scope.map=map,map.addControl(new mapboxgl.Navigation({position:"bottom-right"})),socket.on("tweet",function(response){$scope.$apply(function(){do randomColor="#"+Math.floor(16777215*Math.random()).toString(16);while(randomColor.length<7);var geojson=TwitterService.createTweetGeoJSON(response.statuses);if(data&&(geojson=TwitterService.filterGeoJSON(geojson)),!map.getSource("tweets")){var sourceObj=new mapboxgl.GeoJSONSource;map.addSource("tweets",sourceObj)}if(geojson.features.length>0){map.getSource("tweets").setData(TwitterService.allTweets),version+=1,data=geojson,$rootScope.$broadcast("new-tweets",data);var layerFilter=TwitterService.createLayerFilter(geojson);try{map.addLayer({id:"tweet-v"+version,type:"circle",source:"tweets",interactive:!0,layout:{visibility:"visible"},paint:{"circle-color":randomColor,"circle-blur ":1,"circle-radius":4,"circle-opacity":.7},filter:layerFilter})}catch(err){console.log(randomColor),console.log(err)}}})}),map.on("style.load",function(){}),map.on("mousemove",function(e){map.featuresAt(e.point,{layer:"parking",radius:10},function(err,features){map.getCanvas().style.cursor=!err&&features.length?"pointer":""})}),map.on("click",function(e){map.featuresAt(e.point,{layers:"parking",radius:10,includeGeometry:!0},function(err,features){if(err)throw err;if(features.length){var html="";Object.keys(features[0].properties).forEach(function(key){html+="<div>"+key+": "+features[0].properties[key]+"</div>"}),(new mapboxgl.Popup).setLngLat(features[0].geometry.coordinates).setText(features[0].properties.text).addTo(map)}})})});mapApp.constant("config",{"gl-accessToken":"pk.eyJ1IjoiZGFuaWVsZHVoaCIsImEiOiJwaGJFeTlFIn0.yN6caVQJ2ZoqDIMMht_SVQ","openCage-key":"8a42c3b94f75755558242e0875448c1a"}),angular.module("mapApp").controller("mapSearch",function($scope,$http,$q,TwitterService,MapService){$scope.searchQuery="",$scope.googleResults={},$scope.goToLocation=function(obj){$scope.map.flyTo({center:[obj.geometry.coordinates[0],obj.geometry.coordinates[1]],zoom:12}),TwitterService.getTweetsForLocation(obj),$scope.hideResults=!0},$scope.changeSearchText=function(text){$scope.searchQuery=text},$scope.getGoogleSearchData=function(){MapService.googleGeocode($scope.searchQuery).then(function(res){$scope.googleResults=res})},$scope.getOpenCageSearchData=function(){MapService.openCageGeocode($scope.searchQuery).then(function(res){$scope.openCageResults=res,$scope.hideResults=!1})}}),angular.module("mapApp").service("MapService",function($http,$q,config){var service={};return service.googleGeocode=function(query){var deferred=$q.defer(),url="https://maps.googleapis.com/maps/api/geocode/json?address="+encodeURI(query);return $http.get(url,{cache:!0}).then(function(response){response.data&&response.data.error&&deferred.reject(response.data.error),deferred.resolve(response.data)},function(err){deferred.reject(err)}),deferred.promise},service.openCageGeocode=function(query){var deferred=$q.defer(),url="https://api.opencagedata.com/geocode/v1/geojson?q="+encodeURI(query)+"&key="+config["openCage-key"]+"&pretty=1";return $http.get(url,{cache:!0}).then(function(response){response.data&&response.data.error&&deferred.reject(response.data.error),deferred.resolve(response.data)},function(err){deferred.reject(err)}),deferred.promise},service}),mapApp.service("socket",["$rootScope",function($rootScope){var socket=io.connect();return{on:function(eventName,callback){socket.on(eventName,callback)},emit:function(eventName,data){socket.emit(eventName,data)}}}]),mapApp.controller("TweetsCtrl",function($scope,$http,$templateCache,$rootScope,$mdToast,TwitterService,$mdSidenav){$scope.timeLine=!1,$scope.tweets={},$scope.searchQuery="";var activeChapterName;$scope.$on("new-tweets",function(event,data){$scope.tweets=TwitterService.allTweets,$mdSidenav("left").open(),activeChapterName=Object.keys(TwitterService.getFlyToDict())[0],$scope.map.flyTo(TwitterService.getFlyToDict()[activeChapterName]),$scope.showSimpleToast()}),$scope.toggleTimeline=function(){},$scope.showSimpleToast=function(){$mdToast.show($mdToast.simple().textContent("New Tweet!").position("bottom right").hideDelay(1e3))},$scope.flyToTweet=function(id){var tweet=_.find(TwitterService.allTweets.features,function(v){return v.properties.id==id});$scope.map.flyTo({center:tweet.geometry.coordinates}),$scope.selectedTweet=tweet.properties.id}}),angular.module("mapApp").service("TwitterService",function($http){function sortTweetsByMostRecent(){service.allTweets.features=service.allTweets.features.sort(function(a,b){return b.properties.timestamp_ms-a.properties.timestamp_ms})}var service={};return service.allTweets={type:"FeatureCollection",features:[]},service.createTweetGeoJSON=function(arr){var features=[],geojson={type:"FeatureCollection",features:[]};return arr.forEach(function(obj){var properties={},geoj={type:"Feature",geometry:{},properties:{}};Object.keys(obj).forEach(function(o){properties[o]=obj[o]}),geoj.properties=properties,obj.coordinates&&(geoj.geometry=obj.coordinates,features.push(geoj))}),0==service.allTweets.features.length&&(service.allTweets.features=features),geojson.features=features,sortTweetsByMostRecent(),geojson},service.filterGeoJSON=function(newdata){return service.allTweets.features.forEach(function(org){var oid=org.properties.id;newdata.features=_.filter(newdata.features,function(n){return n.properties.id!==oid})}),console.log("Number of new tweets: "+newdata.features.length),newdata.features.forEach(function(obj){service.allTweets.features.push(obj)}),sortTweetsByMostRecent(),newdata},service.createLayerFilter=function(geojson){var filter=["any"];return geojson.features.forEach(function(geo){filter.push(["==","id",geo.properties.id])}),filter},service.getTweetsForLocation=function(geom){var req={method:"POST",url:"/tweets",data:JSON.stringify(geom),headers:{"Content-Type":"application/json"},cache:!0};$http(req).success(function(data,status,headers,config){console.log(data)}).error(function(data,status,headers,config){console.log(data)})},service.getFlyToDict=function(){var dict={};return service.allTweets.features.forEach(function(obj){dict[obj.properties.id]={center:[obj.geometry.coordinates[0],obj.geometry.coordinates[1]],zoom:15,bearing:27,pitch:20,curve:1,speed:2}}),dict},service});
//# sourceMappingURL=gl-live-tweets.min.map